//
// This PEG file strives to capture as much of the declarative
// pipeline syntax as possible
//
pipeline = _{ SOI ~ "pipeline" ~
                    BLOCK_BEGIN ~
                    agentDecl? ~
                    optionsDecl? ~
                    environmentDecl? ~
                    stagesDecl ~
                    BLOCK_END ~ EOI }


agentDecl = { "agent" ~
              ("any"
              | "none"
              | agentBlock)
            }
agentBlock = {
                BLOCK_BEGIN ~
                k8sAgent ~
                BLOCK_END
             }
k8sAgent = { "kubernetes" ~
             BLOCK_BEGIN ~
             ("defaultContainer" ~ STR)? ~
             ("yaml" ~ STR)? ~
             ("yamlFile" ~ STR)? ~
             BLOCK_END
           }


environmentDecl = { "environment" ~
                    BLOCK_BEGIN ~
                    (envProperty)* ~
                    BLOCK_END
                  }
envProperty = {
                property
                | credentialProperty
              }
credentialProperty = { IDENT ~
                        "=" ~
                        "credentials(" ~ STR ~ ")"
                      }


optionsDecl = { "options" ~
                BLOCK_BEGIN ~
                (optionFunc)* ~
                BLOCK_END
              }
optionFunc = { IDENT ~ "()" }

stagesDecl = { "stages" ~
                BLOCK_BEGIN ~
                (stage)+ ~
                BLOCK_END
              }

stage = { "stage(" ~ STR ~ ")" ~
            BLOCK_BEGIN ~
            agentDecl? ~
            environmentDecl? ~
            stepsDecl ~
            BLOCK_END
        }

stepsDecl = { "steps" ~
            BLOCK_BEGIN ~
            (step)+ ~
            BLOCK_END
            }

step = { IDENT ~ (
                    args
                    | kwargs
                    )
        }

args = { (STR ~ COMMA?)+ }
kwargs = _{ (kwarg ~ COMMA?)+ }
kwarg = { IDENT~ ":" ~ STR }
property = { IDENT ~ "=" ~ STR }

IDENT = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
BLOCK_BEGIN = @{ "{" }
BLOCK_END = @{ "}" }
STR = { "'" ~ STRV ~ "'" }
STRV = @{ "''" | (!"'" ~ ANY)* }
COMMA = @{ "," }

WHITESPACE = _{ (" " | NEWLINE) }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
